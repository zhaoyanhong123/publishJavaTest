name: Build and Deploy to AKS

on:
  push:
    branches: [ "main" ]  # 触发条件：推送到 main 分支

env:
  ACR_NAME: mycontainerregistry  # ACR 名称
  RESOURCE_GROUP: appServiceGroup  # 资源组名称
  AKS_CLUSTER: appServiceGroup  # AKS 集群名称
  IMAGE_NAME: my-java-app  # Docker 镜像名称

jobs:
  build-deploy:
    runs-on: ubuntu-latest  # 使用 Ubuntu 作为运行环境
    steps:
    # 1. 检出代码
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. 设置 Java 环境
    - name: Set up Java 1.8
      uses: actions/setup-java@v3
      with:
        java-version: '8.0.392+8'
        distribution: 'temurin'

    # 3. 使用 Maven 构建项目
    - name: Build with Maven
      run: mvn clean package -DskipTests

    # 4. 登录 Azure
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: '{
          "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
          "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
          "tenantId": "${{ secrets.AZURE_TENANT_ID }}",
          "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        }'
        auth-type: serviceprincipal
    # 5. 构建并推送 Docker 镜像到 ACR
    - name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          mycontainerregistry.azurecr.io/java-app:SHA256:3WR3FLGLSE9U3h+hR9rATeYBdsm0C5yVLS3jxeMfRto
          mycontainerregistry.azurecr.io/java-app:latest

    # 6. 获取 AKS 集群凭据
    - name: Get AKS credentials
      run: |
        az aks get-credentials \
          --resource-group appServiceGroup \
          --name aksGroup \
          --overwrite-existing

    # 7. 部署到 AKS
    - name: Deploy to AKS
      uses: Azure/k8s-deploy@v4
      with:
        namespace: default
        manifests: |
          k8s/deployment.yaml
          k8s/service.yaml
        images: |
          mycontainerregistry.azurecr.io/java-app:SHA256:3WR3FLGLSE9U3h+hR9rATeYBdsm0C5yVLS3jxeMfRto